WAY = cbind(X, Y)
ltmle.SL<- ltmle(data=WAY, Anodes="bullied", Ynodes="Y", abar=list(1,0), SL.library=SL.library)
tmle.summary = summary(ltmle.SL)
TMLE = tmle.summary$effect.measures$ATE
TMLE
# unadjusted ATE
unadjusted = mean(WAY$Y[WAY$bullied==1]-WAY$Y[WAY$bullied==0])
# unadjusted ATE
unadjusted = mean(WAY$Y[WAY$bullied==1]) - mean(WAY$Y[WAY$bullied==0])
# performance of algorithms
ltmle.Sl
# performance of algorithms
ltmle.SL
View(ltmle.SL)
# performance of algorithms
SL.pred
ltmle.SL<- ltmle(data=WAY, Anodes="bullied", Ynodes="Y", abar=list(1,0), SL.library=SL.library, attr(SL.library, "return.fit") == TRUE)
ltmle.SL<- ltmle(data=WAY, Anodes="bullied", Ynodes="Y", abar=list(1,0), SL.library=SL.library, attr(SL.library, "return.fit") == TRUE)
ltmle.SL<- ltmle(data=WAY, Anodes="bullied", Ynodes="Y", abar=list(1,0), SL.library=SL.library)
ltmle.SL<- ltmle(data=WAY, Anodes="bullied", Ynodes="Y", abar=list(1,0), SL.library=SL.library, attr(SL.library, "return.fit"))
ltmle.SL$fit
# CV risk
CVrisk = CV.SuperLearner(Y=Y, X=X, SL.library=SL.library, family='binomial', cvControl=list(V=5))
CVrisk
summary(CVrisk)
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))+1000
# 1) Run code in Rassign4_modifiedIPTW.R
set.seed(1)
# The true value of Qbar0(A,W) = E_0[Y|A,W]
Qbar0 = function(A,W){1000 + plogis(W*A)}
# The true value of g0(1|W) = Pr(A=1|W)
g0 = function(W){0.2 + 0.6*W}
# A function which returns a data frame with n i.i.d. observations from P0
gen.data = function(n){
W=rbinom(n,1,1/2)
A = rbinom(n,1,g0(W))
Y = 1000+rbinom(n,1,Qbar0(A,W)-1000)
return(data.frame(W=W,A=A,Y=Y))
}
# samples size
n= 1000
# Number of Monte Carlo draws
R = 2000
# Matrix of estimates from IPTW, modified Horvitz-Thompson, and my.est
est = matrix(NA,nrow=R,ncol=3)
colnames(est) = c('IPTW','Modifed HT','my.est')
ObsData = gen.data(n)
W = ObsData$W
A = ObsData$A
Y = ObsData$Y
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))+1000
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))*max(Y)
for(r in 1:R){
# Generate data with sample size
ObsData = gen.data(n)
W = ObsData$W
A = ObsData$A
Y = ObsData$Y
# IPTW estimate
IPTW.est = mean(A * Y/g0(W))
# Modified Horvitz-Thompson estimate
HT.est = mean(A * Y/g0(W))/mean(A/g0(W))
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))*max(Y)
# Put the estimates into the est matrix
est[r,] = c(IPTW.est,HT.est,my.est)
}
# Calculate the true value of EE[Y|A=1,W]
truth = 1/2*(Qbar0(1,0) + Qbar0(1,1))
# Calculate the estimated bias, variance, and MSE
est.bias = colMeans(est) - truth
est.var = apply(est,2,var)
est.mse = est.bias^2 + est.var
print(est.bias)
print(est.var)
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))*min(Y)
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y))/g0(W))/mean(A/g0(W))+min(Y)
# You should replace the NA below with your own estimate
my.est = mean(A * (Y-1000/g0(W))/mean(A/g0(W))+1000
# Put the estimates into the est matrix
est[r,] = c(IPTW.est,HT.est,my.est)
my.est = mean(A * (Y-1000/g0(W))/mean(A/g0(W))+1000
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))+1000
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))+1000)
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))*min(Y))
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))*max(Y))
for(r in 1:R){
# Generate data with sample size
ObsData = gen.data(n)
W = ObsData$W
A = ObsData$A
Y = ObsData$Y
# IPTW estimate
IPTW.est = mean(A * Y/g0(W))
# Modified Horvitz-Thompson estimate
HT.est = mean(A * Y/g0(W))/mean(A/g0(W))
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))+1000)
# Put the estimates into the est matrix
est[r,] = c(IPTW.est,HT.est,my.est)
}
for(r in 1:R){
# Generate data with sample size
ObsData = gen.data(n)
W = ObsData$W
A = ObsData$A
Y = ObsData$Y
# IPTW estimate
IPTW.est = mean(A * Y/g0(W))
# Modified Horvitz-Thompson estimate
HT.est = mean(A * Y/g0(W))/mean(A/g0(W))
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))+1000)
# Put the estimates into the est matrix
est[r,] = c(IPTW.est,HT.est,my.est)
}
# Calculate the true value of EE[Y|A=1,W]
truth = 1/2*(Qbar0(1,0) + Qbar0(1,1))
# Calculate the estimated bias, variance, and MSE
est.bias = colMeans(est) - truth
est.var = apply(est,2,var)
est.mse = est.bias^2 + est.var
print(est.bias)
print(est.var)
print(est.mse)
# 1) Run code in Rassign4_modifiedIPTW.R
set.seed(1)
# The true value of Qbar0(A,W) = E_0[Y|A,W]
Qbar0 = function(A,W){1000 + plogis(W*A)}
# The true value of g0(1|W) = Pr(A=1|W)
g0 = function(W){0.2 + 0.6*W}
# A function which returns a data frame with n i.i.d. observations from P0
gen.data = function(n){
W=rbinom(n,1,1/2)
A = rbinom(n,1,g0(W))
Y = 1000+rbinom(n,1,Qbar0(A,W)-1000)
return(data.frame(W=W,A=A,Y=Y))
}
# samples size
n= 1000
# Number of Monte Carlo draws
R = 2000
# Matrix of estimates from IPTW, modified Horvitz-Thompson, and my.est
est = matrix(NA,nrow=R,ncol=3)
colnames(est) = c('IPTW','Modifed HT','my.est')
for(r in 1:R){
# Generate data with sample size
ObsData = gen.data(n)
W = ObsData$W
A = ObsData$A
Y = ObsData$Y
# IPTW estimate
IPTW.est = mean(A * Y/g0(W))
# Modified Horvitz-Thompson estimate
HT.est = mean(A * Y/g0(W))/mean(A/g0(W))
# You should replace the NA below with your own estimate
my.est = mean(A * (Y/max(Y)/g0(W))/mean(A/g0(W))+1000)
# Put the estimates into the est matrix
est[r,] = c(IPTW.est,HT.est,my.est)
}
# Calculate the true value of EE[Y|A=1,W]
truth = 1/2*(Qbar0(1,0) + Qbar0(1,1))
# Calculate the estimated bias, variance, and MSE
est.bias = colMeans(est) - truth
est.var = apply(est,2,var)
est.mse = est.bias^2 + est.var
# Only can report estimated bias/variance/MSE because only took finitely many Monte Carlo draws (2000)
print('The estimators have (estimated) bias:')
print(est.bias)
print('The estimators have (estimated) variance:')
print(est.var)
print('The estimators have (estimated) MSE:')
print(est.mse)
# Chunk 1: setup
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(childsds)
library(epiR)
library(SuperLearner)
library(ltmle)
library(knitr)
library(tidyr)
#these two packages allow for paralellization of the analysis using multiple computer processor cores
library(foreach)
library(doParallel)
knitr::opts_chunk$set(include = FALSE, cache = TRUE)
# First, load the data
ShelleyStephLizzyVeronicaDataLoad <- function(filename)
{
if(Sys.info()['sysname']=="Darwin"){
macfilepath <- paste("./NLSY Data/", filename, sep = "")
load(as.character(macfilepath), envir = globalenv())}
else{
if(Sys.info()['login']=="Peter"){
peterfilepath <- paste("~/Steph/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(peterfilepath), envir = globalenv())}
else{
windowsfilepath <- paste("~/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(windowsfilepath), envir = globalenv())
}
}
}
ShelleyStephLizzyVeronicaDataLoad("imputed_data.Rdata")
final_data <- imputed_data
rm(imputed_data)
# Chunk 2: data cleaning
#Let's do all Variable prep/Data cleaning in this chunk
#some cleaning of variables to rename levels for ease of visualization
final_data$bullied_bf_12_1997 <- as.factor(final_data$bullied_bf_12_1997)
final_data$bullied_bf_12_1997 <- revalue(final_data$bullied_bf_12_1997,
c("0"="NotBullied", "1"="Bullied"))
final_data$ever_new_user2 <- as.factor(final_data$ever_new_user2)
final_data$ever_new_user2 <- revalue( final_data$ever_new_user2,
c("0" = "NoDrugUse", "1" = "DrugUse"))
final_data$KEY_RACE_ETHNICITY_1997 <- as.factor(final_data$KEY_RACE_ETHNICITY_1997)
final_data$KEY_RACE_ETHNICITY_1997 <- revalue(final_data$KEY_RACE_ETHNICITY_1997,
c("1"="Black", "2"="Hispanic", "3"="MixedRace", "4"="White"))
#Decision was made to remove the Mixed Race group due to small numbers
final_data <- final_data %>% filter(KEY_RACE_ETHNICITY_1997 != "MixedRace")
final_data$KEY_RACE_ETHNICITY_1997 <- droplevels(final_data$KEY_RACE_ETHNICITY_1997) #takes away the empty category
final_data$KEY_SEX_1997 <- as.factor(final_data$KEY_SEX_1997)
final_data$KEY_SEX_1997 <- revalue(final_data$KEY_SEX_1997,
c("1"="M", "2"="F"))
final_data$anySameSex <- as.factor(final_data$anySameSex)
final_data$anySameSex <- revalue(final_data$anySameSex, c("FALSE" = "NoSameSex", "TRUE" = "SomeSameSex"))
final_data$learning_disability_1997 <- as.factor(final_data$learning_disability_1997)
final_data$learning_disability_1997  <- revalue(final_data$learning_disability_1997 , c("0" = "NoLearningDisability", "1" = "LearningDisability"))
final_data$CV_CITIZENSHIP_1997 <- as.factor(final_data$CV_CITIZENSHIP_1997)
final_data$CV_CITIZENSHIP_1997 <- revalue(final_data$CV_CITIZENSHIP_1997, c("1"="BornInUS", "2"="NotBornInUS", "3"="BirthplaceUnknown"))
final_data$anySameSex <- as.factor(final_data$anySameSex)
final_data$anySameSex <- revalue(final_data$anySameSex, c("1"="SameSex", "0"="NoSameSex"))
final_data$YOUTH_BOTHBIO.01_1997 <- as.factor(final_data$YOUTH_BOTHBIO.01_1997)
final_data$YOUTH_BOTHBIO.01_1997 <- revalue(final_data$YOUTH_BOTHBIO.01_1997, c("1"="LivesWBothBioParents", "0"="DoesntLiveWBioParents"))
final_data$overweight <- as.factor(final_data$overweight)
final_data$overweight <- revalue(final_data$overweight, c("0"="NotOverweight", "1"="Overweight"))
#Categorizing the Maternal Education variable
final_data$MomEducation <- NA
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 < 12] <- 0
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 == 12] <- 1
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 > 12] <- 2
final_data$MomEducation <-as.factor(final_data$MomEducation)
final_data$MomEducation <- revalue(final_data$MomEducation, c("0"="LessThanHigh", "1"="HighSchlGrad", "2"="SomeCollege"))
#dichotomous version of maternal education variable
final_data$MomEduDi <- NA
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 < 12] <- 1
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 == 12] <- 1
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 > 12] <- 2
final_data$MomEduDi <-as.factor(final_data$MomEduDi)
final_data$MomEduDi <- revalue(final_data$MomEduDi, c("1"="HighSchlOrLess", "2"="SomeCollege"))
#Using CDC growth charts (via childsds package) to get BMI Z scores by age
final_data <-  final_data %>%
mutate(bmiz = sds(BMI,
age = KEY_AGE_1997,
sex = KEY_SEX_1997, male = "M", female =  "F",
ref = cdc.ref,
item = "bmi",
type = "SDS"))
#Note, there's one observation with a z score of -20, and some with -Inf (9 observations total)
#final_data %>% ggplot(aes(y=bmiz)) +geom_boxplot() #can uncomment this line to see the boxplot if desired
#We decided to exclude those 9 subjects, so
final_data <-  final_data %>% filter(bmiz> -15)
#Overweight variable based on pediatric criteria
final_data$PediOverweight<-"NotOverweight"
final_data$PediOverweight[final_data$bmiz > 1.036433] <-"Overweight" #because z of 1.036433 corresponds to 85th percentile, which is the definition of overweight in kids
final_data$PediOverweight <- as.factor(final_data$PediOverweight)
save(final_data, file = "final_data_BMIz.RData")
N <- nrow(final_data)
N
table(final_data$KEY_RACE_ETHNICITY_1997)
race_Black_drugyes <- final_data[ever_new_user2==1]
race_Hispanic_drugyes <-
race_White_drugyes <-
race_Black_drugyes <- final_data[final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997=="Black"]
race_Black_drugyes
race_Black_drugyes <- final_data[final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997==1]
race_Black_drugyes
race_Black_drugyes <- (final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997==1)
race_Black_drugyes
race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997==1, 1, 0)
race_Black_drugyes
race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997=="Black", 1, 0)
race_Black_drugyes
View(final_data)
table(final_data$ever_new_user2, final_data$KEY_RACE_ETHNICITY_1997)
race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997=="Black", 1, 0)
table(race_Black_drugyes)
final_data$race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997=="Black", 1, 0)
table(final_data$race_Black_drugyes)
#drug use
final_data$race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997==1, 1, 0)
table(final_data$race_Black_drugyes)
final_data$race_Black_drugyes <- ifelse(final_data$ever_new_user2==1 & final_data$KEY_RACE_ETHNICITY_1997=="1", 1, 0)
table(final_data$race_Black_drugyes)
final_data$race_Black_drugyes <- ifelse(final_data$ever_new_user2=="1" & final_data$KEY_RACE_ETHNICITY_1997=="1", 1, 0)
table(final_data$race_Black_drugyes)
#drug use
race.table <- table(final_data$ever_new_user2, final_data$KEY_RACE_ETHNICITY_1997)
race.table
#drug use
race.table <- table(final_data$ever_new_user2, final_data$KEY_RACE_ETHNICITY_1997)
install.packages("childsds")
library(childsds)
setwd("~/Desktop/UC Berkeley/finalproject/NLSY Data")
final_data <- ("imputed_data.Rdata")
load("~/Desktop/UC Berkeley/finalproject/NLSY Data/imputed_data.Rdata")
final_data <- load("~/Desktop/UC Berkeley/finalproject/NLSY Data/imputed_data.Rdata")
final_data <- load("~/Desktop/UC Berkeley/finalproject/NLSY Data/imputed_data.Rdata")
final_data <- imputed_data
rm(imputed_data)
View(final_data)
names(final_data)
View(final_data)
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
install.packages("childsds")
library(childsds)
library(epiR)
library(SuperLearner)
library(ltmle)
library(knitr)
library(tidyr)
#these two packages allow for paralellization of the analysis using multiple computer processor cores
library(foreach)
library(doParallel)
knitr::opts_chunk$set(include = FALSE, cache = TRUE)
# First, load the data
ShelleyStephLizzyVeronicaDataLoad <- function(filename)
{
if(Sys.info()['sysname']=="Darwin"){
macfilepath <- paste("./NLSY Data/", filename, sep = "")
load(as.character(macfilepath), envir = globalenv())}
else{
if(Sys.info()['login']=="Peter"){
peterfilepath <- paste("~/Steph/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(peterfilepath), envir = globalenv())}
else{
windowsfilepath <- paste("~/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(windowsfilepath), envir = globalenv())
}
}
}
ShelleyStephLizzyVeronicaDataLoad("imputed_data.Rdata")
final_data <- imputed_data
rm(imputed_data)
install.packages("childsds")
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(childsds)
library(epiR)
library(SuperLearner)
library(ltmle)
library(knitr)
library(tidyr)
#these two packages allow for paralellization of the analysis using multiple computer processor cores
library(foreach)
library(doParallel)
knitr::opts_chunk$set(include = FALSE, cache = TRUE)
# First, load the data
ShelleyStephLizzyVeronicaDataLoad <- function(filename)
{
if(Sys.info()['sysname']=="Darwin"){
macfilepath <- paste("./NLSY Data/", filename, sep = "")
load(as.character(macfilepath), envir = globalenv())}
else{
if(Sys.info()['login']=="Peter"){
peterfilepath <- paste("~/Steph/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(peterfilepath), envir = globalenv())}
else{
windowsfilepath <- paste("~/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(windowsfilepath), envir = globalenv())
}
}
}
ShelleyStephLizzyVeronicaDataLoad("imputed_data.Rdata")
final_data <- imputed_data
rm(imputed_data)
library(plyr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(childsds)
library(epiR)
library(SuperLearner)
library(ltmle)
library(knitr)
library(tidyr)
#these two packages allow for paralellization of the analysis using multiple computer processor cores
library(foreach)
library(doParallel)
knitr::opts_chunk$set(include = FALSE, cache = TRUE)
# First, load the data
ShelleyStephLizzyVeronicaDataLoad <- function(filename)
{
if(Sys.info()['sysname']=="Darwin"){
macfilepath <- paste("./NLSY Data/", filename, sep = "")
load(as.character(macfilepath), envir = globalenv())}
else{
if(Sys.info()['login']=="Peter"){
peterfilepath <- paste("~/Steph/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(peterfilepath), envir = globalenv())}
else{
windowsfilepath <- paste("~/GitHub/finalproject/NLSY Data/", filename, sep = "")
load(as.character(windowsfilepath), envir = globalenv())
}
}
}
ShelleyStephLizzyVeronicaDataLoad("imputed_data.Rdata")
final_data <- imputed_data
rm(imputed_data)
load("~/Desktop/UC Berkeley/finalproject/NLSY Data/imputed_data.Rdata")
final_data <- load("~/Desktop/UC Berkeley/finalproject/NLSY Data/imputed_data.Rdata")
final_data <- imputed_data
#Let's do all Variable prep/Data cleaning in this chunk
#some cleaning of variables to rename levels for ease of visualization
final_data$bullied_bf_12_1997 <- as.factor(final_data$bullied_bf_12_1997)
final_data$bullied_bf_12_1997 <- revalue(final_data$bullied_bf_12_1997,
c("0"="NotBullied", "1"="Bullied"))
final_data$ever_new_user2 <- as.factor(final_data$ever_new_user2)
final_data$ever_new_user2 <- revalue( final_data$ever_new_user2,
c("0" = "NoDrugUse", "1" = "DrugUse"))
final_data$KEY_RACE_ETHNICITY_1997 <- as.factor(final_data$KEY_RACE_ETHNICITY_1997)
final_data$KEY_RACE_ETHNICITY_1997 <- revalue(final_data$KEY_RACE_ETHNICITY_1997,
c("1"="Black", "2"="Hispanic", "3"="MixedRace", "4"="White"))
#Decision was made to remove the Mixed Race group due to small numbers
final_data <- final_data %>% filter(KEY_RACE_ETHNICITY_1997 != "MixedRace")
final_data$KEY_RACE_ETHNICITY_1997 <- droplevels(final_data$KEY_RACE_ETHNICITY_1997) #takes away the empty category
final_data$KEY_SEX_1997 <- as.factor(final_data$KEY_SEX_1997)
final_data$KEY_SEX_1997 <- revalue(final_data$KEY_SEX_1997,
c("1"="M", "2"="F"))
final_data$anySameSex <- as.factor(final_data$anySameSex)
final_data$anySameSex <- revalue(final_data$anySameSex, c("FALSE" = "NoSameSex", "TRUE" = "SomeSameSex"))
final_data$learning_disability_1997 <- as.factor(final_data$learning_disability_1997)
final_data$learning_disability_1997  <- revalue(final_data$learning_disability_1997 , c("0" = "NoLearningDisability", "1" = "LearningDisability"))
final_data$CV_CITIZENSHIP_1997 <- as.factor(final_data$CV_CITIZENSHIP_1997)
final_data$CV_CITIZENSHIP_1997 <- revalue(final_data$CV_CITIZENSHIP_1997, c("1"="BornInUS", "2"="NotBornInUS", "3"="BirthplaceUnknown"))
final_data$anySameSex <- as.factor(final_data$anySameSex)
final_data$anySameSex <- revalue(final_data$anySameSex, c("1"="SameSex", "0"="NoSameSex"))
final_data$YOUTH_BOTHBIO.01_1997 <- as.factor(final_data$YOUTH_BOTHBIO.01_1997)
final_data$YOUTH_BOTHBIO.01_1997 <- revalue(final_data$YOUTH_BOTHBIO.01_1997, c("1"="LivesWBothBioParents", "0"="DoesntLiveWBioParents"))
final_data$overweight <- as.factor(final_data$overweight)
final_data$overweight <- revalue(final_data$overweight, c("0"="NotOverweight", "1"="Overweight"))
#Categorizing the Maternal Education variable
final_data$MomEducation <- NA
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 < 12] <- 0
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 == 12] <- 1
final_data$MomEducation[final_data$CV_HGC_BIO_MOM_1997 > 12] <- 2
final_data$MomEducation <-as.factor(final_data$MomEducation)
final_data$MomEducation <- revalue(final_data$MomEducation, c("0"="LessThanHigh", "1"="HighSchlGrad", "2"="SomeCollege"))
#dichotomous version of maternal education variable
final_data$MomEduDi <- NA
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 < 12] <- 1
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 == 12] <- 1
final_data$MomEduDi[final_data$CV_HGC_BIO_MOM_1997 > 12] <- 2
final_data$MomEduDi <-as.factor(final_data$MomEduDi)
final_data$MomEduDi <- revalue(final_data$MomEduDi, c("1"="HighSchlOrLess", "2"="SomeCollege"))
#Using CDC growth charts (via childsds package) to get BMI Z scores by age
final_data <-  final_data %>%
mutate(bmiz = sds(BMI,
age = KEY_AGE_1997,
sex = KEY_SEX_1997, male = "M", female =  "F",
ref = cdc.ref,
item = "bmi",
type = "SDS"))
#Note, there's one observation with a z score of -20, and some with -Inf (9 observations total)
#final_data %>% ggplot(aes(y=bmiz)) +geom_boxplot() #can uncomment this line to see the boxplot if desired
#We decided to exclude those 9 subjects, so
final_data <-  final_data %>% filter(bmiz> -15)
#Overweight variable based on pediatric criteria
final_data$PediOverweight<-"NotOverweight"
final_data$PediOverweight[final_data$bmiz > 1.036433] <-"Overweight" #because z of 1.036433 corresponds to 85th percentile, which is the definition of overweight in kids
final_data$PediOverweight <- as.factor(final_data$PediOverweight)
save(final_data, file = "final_data_BMIz.RData")
N <- nrow(final_data)
#drug use
race.table <- table(final_data$ever_new_user2, final_data$KEY_RACE_ETHNICITY_1997)
#sex
sex.table <- table(final_data$ever_new_user2, final_data$KEY_SEX_1997)
#mother's education
mothereduc.table <- table(final_data$ever_new_user2, final_data$MomEduDi)
#bio parents
livebioparents.table <- table(final_data$ever_new_user2, final_data$YOUTH_BOTHBIO.01_1997)
#BMI
BMI.table <- table(final_data$ever_new_user2, final_data$bmiz)
N <- nrow(final_data)
#bullying
bully.table <- table(final_data$ever_new_user2, final_data$bullied_bf_12_1997)
#drug use
race.table <- table(final_data$ever_new_user2, final_data$KEY_RACE_ETHNICITY_1997)
#sex
sex.table <- table(final_data$ever_new_user2, final_data$KEY_SEX_1997)
#mother's education
mothereduc.table <- table(final_data$ever_new_user2, final_data$MomEduDi)
#bio parents
livebioparents.table <- table(final_data$ever_new_user2, final_data$YOUTH_BOTHBIO.01_1997)
#BMI
BMI.table <- table(final_data$ever_new_user2, final_data$bmiz)
bully.table
mothereduc.table
sex.table
livebioparents.table
BMI.table
?sd
